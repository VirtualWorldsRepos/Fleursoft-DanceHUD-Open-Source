// This script has the major purpose of simply gathering up link messages and printing them
//  for anyone to see - useful for debugging purposes.
//
// Debug can be set to:
//  1) Print each message right away
//  2) Save up N messages - print them when a 'Debug print' command comes along
//
// We save the link id, number and both message strings
//
// There are some types of messages we do NOT process yet - AO, AO menu and Menu messages
// but the rest should decode correctly.

#include "GlobalDefinitions"
#define KEYWORD_TABLE
#include "Keywords"
#include "Utility"


list msgs = [];
integer count = 0;
list sequence = [];
integer capture = FALSE;				// Good to be capturing through the beta period - so that errors can be detected and fixed quicker during the beta test
integer printEveryMsg = FALSE;		// Normally set to FALSE - but I want to see what is going on inside...
#define MAX_MESSAGES 10

PrintBigString(string str)
{
	integer i;
	integer j;

	// All done gathering it - now display it... llOwnerSay is limited to 1023 characters - so if we have a BIG string, break it into multiple parts...
	j = llStringLength(str);
	if (j > 1000)
	{
		for (i=0; i<j; i+=1000)
		{
			// Is this a string fragment of 1023 or the tail end of the string
			if (i+1023 < j)
				llOwnerSay(llGetSubString(str, i, i+999)+"\\");
			else
				llOwnerSay(llGetSubString(str, i, -1));
		}
	}
	else
		llOwnerSay(str);
}


// Show the specified sequence - either prepared or unprepared (flag determines which)
// The only difference in a prepared sequence is that the dance token is displayed in a lot more detail
ShowSequence(string prefix)
{
	integer i;
	integer j;
	integer k;
	string str;
	list item;
	integer cmd;
	list output;
	
	j = llGetListLength(sequence);
	output = [];
	for (i=0; i<j; ++i)
	{
		item = llParseString2List(llList2String(sequence, i), ["|"], []);
		cmd = llList2Integer(item, Define_SequenceKeyword);
		
		// Check for keywords that we just print the item - so dance and delay
		k = llListFindList([keywordDance, keywordDelay], [cmd]);
		if (-1 != k)
		{
			if (k == 1)	// Delay keyword - we need to divide the delay by 10.0 - we'll use strings to do it easily and neatly...
			{
				str = llList2String(item, Define_SequenceParm1);
				output = AppendStringToList(output, llGetSubString(str,0,-2)+"."+llGetSubString(str,-1,-1));
			}
			else
			{	// Dance keyword - variation is if we have a prepared sequence or not... unprepared has only 2 items
				if (llGetListLength(item) == 2)
					output = AppendStringToList(output, llList2String(item, Define_SequenceParm1));
				else
				{
					// Showing a prepared dance sequence - we have a few more options to display here...
					// Note: We do NOT know the aliases for all the groups, no sense in attempting to display them...
					str = llList2String(item, Define_SequenceParm1)+"(group="+
						llList2String(["Unknown"]+Define_GroupNames,llListFindList(Define_GroupBits, [llList2Integer(item, Define_SequenceParm2)])+1)
						+ llList2String(["", "", ", start" , ", stop"], llList2Integer(item, Define_SequenceParm3)+1)
						+ ", dance index="+(string)llList2Integer(item, Define_SequenceParm4)+")";
					output = AppendStringToList(output, str);
				}
			}
		}
		else
		{
			// Check for keywords that only have outer parameters...
			if (-1 != llListFindList([keywordDialog, keywordIM, keywordMenuStyle, keywordName, keywordNextSequence, keywordOwner_say, keywordSetname, keywordStyle], [cmd]))
				output = AppendStringToList(output, "["+llList2String(keywordTable, cmd)+"]"+llList2String(item, Define_SequenceParm1));
			else
			{
				// Now check for only inner parameters...
				if (-1 != llListFindList([keywordLoop, keywordMix, keywordRand, keywordRandom], [cmd]))
					output = AppendStringToList(output, "["+llList2String(keywordTable, cmd)+" "+llList2String(item, Define_SequenceParm1)+"]");
				else
				{
					// We have a class of keywords that have inner and outer parameters... so do them now...
					if (-1 != llListFindList([keywordAlias, keywordGroup, keywordMenu, keywordMessage, keywordRegion_say, keywordSay, keywordShout, keywordWhisper], [cmd]))
						output = AppendStringToList(output, "["+llList2String(keywordTable, cmd)+" "+llList2String(item, Define_SequenceParm1)+"]"+llList2String(item, Define_SequenceParm2));
					else
						// The remaining keywords are just keywords with no parameters...
						output = AppendStringToList(output, "["+llList2String(keywordTable, cmd)+"]");
				}
			}
		}
	}

	PrintBigString(prefix + llDumpList2String(output, "|"));
}
 

default
{
	link_message(integer sender_num, integer num, string str, key id)
	{
		// If it's our message for debugging commands - do something
		if (num == Define_DEBUGMSGLINKID)
		{
			list cmd = llParseString2List(str, ["|"], []);
			integer debugCmd = llList2Integer(cmd,0);
			
			if (debugCmd == Debug_ShowSequence)
			{
				sequence = llParseString2List((string)id, ["|||"],[]);		
				ShowSequence("Sequence: "+llList2String(cmd,1)+":");
			}
			if (debugCmd == Debug_StartCapture)
			{
				capture = TRUE;
				llOwnerSay("Debug - started capturing debugging information");
			}
			if (debugCmd == Debug_StopCapture)
			{
				capture = FALSE;
				llOwnerSay("Debug - stopped capturing debugging information");
			}
			if (debugCmd == Debug_PrintOn)
			{
				printEveryMsg = TRUE;
				llOwnerSay("Debug - started printing debug information");
			}
			if (debugCmd == Debug_PrintOff)
			{
				printEveryMsg = FALSE;
				llOwnerSay("Debug - stopped printing debug information");
			}
			if (debugCmd == Debug_ShowCaptured)
			{
				integer i;
				
				for (i=0; i < count; ++i)
					PrintBigString("FSD:"+llList2String(msgs,i));
			}
			return;
		}

		if (capture)
		{
			string tmp = llDumpList2String([llGetTime(), num, str, id],"@");
			msgs = AppendStringToList(msgs, tmp);
			if (printEveryMsg)
				PrintBigString("FSD:"+tmp);
			++count;
			
			// If we are at our limit of messages, then remove the first one from the lists
			if (count >= MAX_MESSAGES)
			{
				// First we remove the very first entry
				msgs = DeleteListEntry(msgs, 0);
				--count;
			}
		}
	}
}
