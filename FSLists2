// Second list handling script (just for stack/heap space - because FSLists was getting BIG)
//
// Essentially - HUD resizing (vertical and horozontal) and theme setting menus
//
// THere are differences in how SL and OpenSim handle resizing... sigh

#include "Trace"
#ifdef UNIT_TEST_TRACING
#define MODULE "FSLists2:"
#endif
#include "GlobalDefinitions"
#include "Lists.h"
#include "MenuList.h"
#include "DanceControl.h"
#include "Dancers.h"
#include "Dancer.h"
#include "Services.h"
#include "Read.h"
#include "Chat.h"
#include "Debug"
#include "Keywords"
#include "Utility"
#include "UtilOwnerSay"

// Transient variables
list tmpList = [];
string tmpStr;
integer i;

//
// Reset vertical HUD menu aspect of things
//  It's just a mini menu like the other admin menus
//
#define VERTICAL_CHANGE_MENU_NAME "Set HUD vertical size"

HandleHUDVerticalSize()
{
	integer cmd = llList2Integer(tmpList,0);
	integer length = llGetListLength(clickerHeightCmds);
	string s;
	vector primSize;
	vector primPos;
	integer primChangePosition = 0;	// Where was the 'MenuItem:1' prim? (local vertical offset from root prim)
	integer primChangeSize = 0;		// What's the new prim size?
	integer defaultMenuItem = -1;

	if (cmd == MenuLite_GetMenuRange)
	{
		integer startIndex = llList2Integer(tmpList,1);
		integer linkid = llList2Integer(tmpList, 2);
		integer number = llList2Integer(tmpList,3);

		// Check the upper range and adjust downward if required
		if ((startIndex+number) > length)
			number = (length-startIndex);

		// What is the default height size on the menu? Well... we need to get the current height and
		//  try to find it in the list of sizes. We'll round up and make it an integer so that we can
		//  not have to worry about floating point messiness - worse is that we have to go find the
		//  prim to look at - we'll go looking for the bottom most prim
		primSize = llList2Vector(llGetLinkPrimitiveParams(LINK_ROOT, [ PRIM_SIZE ]), 0);
		for (i = 1; (i < length) && (primChangeSize == 0); ++i)
		{
			s = llGetLinkName((length-i)+1);
			if ("None,HScroll" == s)
			{
				primSize = llList2Vector(llGetLinkPrimitiveParams((length-i)+1, [ PRIM_SIZE ]), 0);
				primChangeSize = llRound(primSize.z * 10000.0);
			}
		}
		
		// We know that the clicker training menu fits
		tmpList = [];
		for (i=0; i < number; ++i)
		{
			s = llList2String(clickerHeightMenu, i+startIndex);
			cmd = llList2Integer(clickerHeightCmds,(startIndex+i));
			tmpStr = llDumpList2String(["#"+(string)(i+startIndex+1)+" "+s,Define_LISTCHANGEHEIGHTLINKID,cmd],"|");
			tmpList = AppendStringToList(tmpList, tmpStr);
			if (i >= ClickerMenuHeight1)
				if (llList2Integer(hudHeightSettings, i-ClickerMenuWidth1) == primChangeSize)
					defaultMenuItem = i; 
		}
		
		tmpStr = llDumpList2String(tmpList, "|||");
		MessageSendMenuRangeSelected(linkid, VERTICAL_CHANGE_MENU_NAME, length, startIndex, Define_FlagRangeConstrainedMenu, Define_LISTCHANGEHEIGHTLINKID, tmpStr, defaultMenuItem);
		tmpList = [];
		tmpStr = "";
		return;
	}

	if (cmd == MenuLite_Select)
	{
		// The menu returned to the user was: Back, Height(0),Height(1)...
		cmd = llList2Integer(tmpList,1);	// Get the selected item from the list...
		if ((cmd >= ClickerMenuHeight1) && (cmd <= ClickerMenuHeight8))
		{
			length = llGetNumberOfPrims();

#ifdef BUILD_FOR_SL
			// Find the first 'MenuItem' prim - the prims after that all get resized and repositioned
			// The idea is that we know that it is the prim under the menu selection (1-10,I,A) and we
			// want to move this prim and all the rest. We get it's current position and size and from
			// that we can calculate a starting position for it and all the others. We do this by
			// calculating where this prim should go (position - height/2 + newPrimHeight/2) and then
			// we can set the size to newPrimHeight.
			for (i = 1; (i < length) && (primChangePosition == 0); ++i)
			{
				s = llGetLinkName((length-i)+1);
				if ("MenuItem:1" == s)
				{
					tmpList = llGetLinkPrimitiveParams((length-i)+1, [ PRIM_SIZE, PRIM_POSITION ]);
					primSize = llList2Vector(tmpList, 0);
					primPos = llList2Vector(tmpList, 1) - llGetRootPosition();
					primChangePosition = llRound(primPos.z * 10000.0) - ( llRound(primSize.z * 10000.0) / 2);	// Z is down for more prims... so subtract
				}
			}

			// Get the new prim size. Take the position and subtract half the height - for the middle of the prim
			primChangeSize = llList2Integer(hudHeightSettings, cmd-ClickerMenuHeight1);
			primChangePosition -= primChangeSize / 2;

			// Loop through our prims (skip the root as we will NOT move it)
			//
			// We start where we left off - at the first menu item and adjust from there to the end (going backwards down the prims)
			while (i < length)
			{
				// We should look - just in case - move MenuItem, MenuText and the last 'None,HScroll' prim - all of them change size and move...
				s = llGetLinkName((length-i)+1);
				if ((-1 != llSubStringIndex(s, "MenuItem")) || (-1 != llSubStringIndex(s, "MenuText")) ||  (s == "None,HScroll"))
				{
					tmpList = llGetLinkPrimitiveParams((length-i)+1, [ PRIM_SIZE, PRIM_POSITION ]);
					primSize = llList2Vector(tmpList, 0);
					primSize.z = ((float) primChangeSize) / 10000.0;
					primPos = llList2Vector(tmpList,1) - llGetRootPosition();	// Returned region coordinates, make them local
					primPos.z = ((float) primChangePosition) / 10000.0;
				    llSetLinkPrimitiveParamsFast((length-i)+1, [ PRIM_SIZE, primSize, PRIM_POSITION, primPos ]);	// Sets with local coordinates
				    primChangePosition -= primChangeSize;	// Down we go for the next prim...
			    }
			    ++i;
			}
#endif
#ifdef BUILD_FOR_OPENSIM
			// For opensim - especially 3rd rock (hadn't tested others yet) - the child prim positions come back
			//  as zero. This is because the change in position/angle is cumlative - instead of absolute.
			// The alternative way to calculate movement for the subprims is to:
			//  1) Find out which size (vertical) that we currently have - that will be used to decide
			//     which setting we started with - important to know that.
			//  2) We know the vertical spacing selected so we can use that in our calculations too...
			// Loops are identical to the SL flavor - just that we know the position change of the link item
			// has to be completely computed - we can NOT GET prim/link locations... so we take the hud
			// put it at 0,0 and then we know that the first menu item is at vertical offset Z - from there
			// we can calculate the correct positioning for each subsequent prim/link - and then we call
			// the recenter option - so that the hud gets put back where it belongs... but the prims are
			// then correctly positioned (YUCK!)

			// First we need to know the current prim size - whcih tells us where we are starting...
			//  The bottom most prim is the one to look for - so go get its size...
			for (i = 1; (i < length) && (primChangeSize == 0); ++i)
			{
				s = llGetLinkName((length-i)+1);
				if ("MenuItem:1" == s)
				{
					tmpList = llGetLinkPrimitiveParams((length-i)+1, [ PRIM_SIZE ]);
					primSize = llList2Vector(tmpList, 0);
					primChangeSize = llRound(primSize.z * 10000.0);
				}
			}

			// Check that we know this height - just so we can resize correctly...
			defaultMenuItem = llListFindList(hudHeightSettings, [ primChangeSize ]);
			if (defaultMenuItem == -1)
			{
				llOwnerSay("Eeps - failed to find prim height of "+(string)primChangeSize+" - something strange happened... can't resize vertically");
				return;
			}

			// Ok - now we know the starting prim height and the ending prim height - from that we can make a
			//  delta - which tells us how much to change the total height from one to the other...
			// May have a bug - need to back up to prim menuname1
			primChangeSize = llList2Integer(hudHeightSettings, cmd-ClickerMenuHeight1);
			defaultMenuItem = (primChangeSize / -2) - 790;	// this adjusts just fine....
			i = i-2;	// Back up to menu prim.

			// Loop through our prims (skip the root as we will NOT move it)
			//
			// We start where we left off - at the first menu item and adjust from there to the end (going backwards down the prims)
			while (i < length)
			{
				// We should look - just in case - move MenuItem, MenuText and the last 'None,HScroll' prim - all of them change size and move...
				s = llGetLinkName((length-i)+1);
				if ((-1 != llSubStringIndex(s, "MenuItem")) || (-1 != llSubStringIndex(s, "MenuText")) ||  (s == "None,HScroll"))
				{
					tmpList = llGetLinkPrimitiveParams((length-i)+1, [ PRIM_SIZE, PRIM_POSITION ]);
					primSize = llList2Vector(tmpList, 0);
					primSize.z = ((float) primChangeSize) / 10000.0;
					primPos = llList2Vector(tmpList,1);
					primPos.z = (float)defaultMenuItem/10000.0;
					primPos.y=0.0;
					primPos.x=0.0;
				    llSetLinkPrimitiveParamsFast((length-i)+1, [ PRIM_SIZE, primSize, PRIM_POSITION, primPos ]);	// Sets with local coordinates - which works relative to root prim...
				    defaultMenuItem -= primChangeSize;	// Down we go for the next prim...
			    }
			    ++i;
			}
#endif
			MessageRecenterHUD();
			MessageGoToMenu(Define_LISTCHANGEHEIGHTLINKID);
			return;
		}

		MessageGoToMenu(Define_ADMINLINKID);
	}
}


//
// Reset horozontal HUD menu aspect of things
//  It's just a mini menu like the other admin menus
//
#define HOROZONTAL_CHANGE_MENU_NAME "Set HUD width"

HandleHUDHorozontalSize()
{
	integer cmd = llList2Integer(tmpList,0);
	integer length = llGetListLength(clickerWidthCmds);
	string s;
	float width;
	vector primSize;
	integer lookingFor;
	integer defaultMenuItem = -1;	// Default is no menu item selected - just in case

	if (cmd == MenuLite_GetMenuRange)
	{
		integer startIndex = llList2Integer(tmpList,1);
		integer linkid = llList2Integer(tmpList, 2);
		integer number = llList2Integer(tmpList,3);

		// Check the upper range and adjust downward if required
		if ((startIndex+number) > length)
			number = (length-startIndex);

		// What is the default width size on the menu? Well... we need to get the current width and
		//  try to find it in the list of sizes. We'll round up and make it an integer so that we can
		//  not have to worry about floating point messiness
		primSize = llList2Vector(llGetLinkPrimitiveParams(LINK_ROOT, [ PRIM_SIZE ]), 0);
		lookingFor = llRound(primSize.y * 1000.0);
		
		// We know that the clicker training menu fits
		tmpList = [];
		for (i=0; i < number; ++i)
		{
			s = llList2String(clickerWidthMenu, i+startIndex);
			cmd = llList2Integer(clickerWidthCmds,(startIndex+i));
			tmpStr = llDumpList2String(["#"+(string)(i+startIndex+1)+" "+s,Define_LISTCHANGEWIDTHLINKID,cmd],"|");
			tmpList = AppendStringToList(tmpList, tmpStr);
			if (i >= ClickerMenuWidth1)
				if (llList2Integer(hudWidthSettings, i-ClickerMenuWidth1) == lookingFor)
					defaultMenuItem = i; 
		}

		tmpStr = llDumpList2String(tmpList, "|||");
		MessageSendMenuRangeSelected(linkid, HOROZONTAL_CHANGE_MENU_NAME, length, startIndex, Define_FlagRangeConstrainedMenu, Define_LISTCHANGEWIDTHLINKID, tmpStr, defaultMenuItem);
		tmpList = [];
		tmpStr = "";
		return;
	}

	if (cmd == MenuLite_Select)
	{
		// The menu returned to the user was: Clicker(0),Clicker(1)...
		cmd = llList2Integer(tmpList,1);	// Get the selected item from the list...
		if ((cmd >= ClickerMenuWidth1) && (cmd <= ClickerMenuWidth8))
		{
			length = llGetNumberOfPrims();
			width = llList2Float(hudWidthSettings, cmd-ClickerMenuWidth1) / 1000.0;

			for (cmd = 0; cmd < length; ++cmd)
			{
				primSize = llList2Vector(llGetLinkPrimitiveParams(cmd+1, [ PRIM_SIZE ]), 0);
				primSize.y = width;
			    llSetLinkPrimitiveParamsFast(cmd+1, [ PRIM_SIZE, primSize ]);
			}
			MessageRecenterHUD();
			MessageGoToMenu(Define_LISTCHANGEWIDTHLINKID);
			return;
		}

		MessageGoToMenu(Define_ADMINLINKID);
	}
}

#define INVENTORY_THEME_MENU_NAME "Select theme texture"
HandleThemeSetting()
{
	integer cmd = llList2Integer(tmpList,0);
	integer length = llGetInventoryNumber(INVENTORY_TEXTURE);
	integer selected = -1;
	string s;
	vector color;
	float alpha;
	list p2;
	string primTexture;
	vector primTextColorNormal;
	vector primTextColorHighlight;
	vector primBackgroundColor;
	float primBackgroundAlpha;
	float primTextColorAlpha;
	float primTextColorHighlightAlpha;

	if (cmd == MenuLite_GetMenuRange)
	{
		integer startIndex = llList2Integer(tmpList,1);
		integer linkid = llList2Integer(tmpList, 2);
		integer number = llList2Integer(tmpList,3);

		// Check the upper range and adjust downward if required
		if ((startIndex+number) > length+1)	// (Back)+textures
			number = (length-startIndex)+1;

		// We use a constrained menu - it can scroll... but no selections outside of what we show them
		// We expect that there is at least one texture - and add a back button first...
		//  We filter nothing out - because the order does matter - but we're hoping to get a theme-based name of a texture on the select
		tmpList = [ llDumpList2String(["Back",Define_INVENTORYTHEMELINKID,0],"|") ];	// First menu entry is 'Back'
		for (i=0; i < number-1; ++i)
		{
			s = llDumpList2String([llGetInventoryName(INVENTORY_TEXTURE, startIndex+i),Define_INVENTORYTHEMELINKID,startIndex+i+1],"|");
			tmpList = AppendStringToList(tmpList, s);
		}
		
		s = llDumpList2String(tmpList, "|||");
		MessageSendMenuRange(linkid, INVENTORY_THEME_MENU_NAME, length, startIndex, Define_FlagRangeConstrainedMenu, Define_INVENTORYTHEMELINKID, s);
		tmpList = [];
		return;
	}

	if (cmd == MenuLite_Select)
	{
		// The menu returned to the user was: (back)(inventory texture 0)(inventory texture 1)... (till end of menu)
		selected = llList2Integer(tmpList,1);	// Get the selected item from the list...
		if ((selected > 0) && (selected <= length))
		{
			// They picked a texture - not sure that it's a theme - let's get the name and see what we can see...
			// If there are NO colors specified, then we just use the default colors (which may or may not be ok)
			//
			// We are parsing the name which should look like:   name of texture/bg=##,##,##/fg=##,##,##/hl=##,##,##
			//  (but name of texture/bg,##=##=##  will also work)
			//  bg = background color (black by default)
			//  fg = fourground color (white by default)
			//  hl = highlight color (green by default)
			//
			// Note: If there are no colors, we take the defaults and hope that the user can still see enough... a reset
			//       will send the whole GUI back to factory defaults.
			primTexture = llGetInventoryName(INVENTORY_TEXTURE, selected-1);
			tmpList = llParseString2List(primTexture, ["/"], []);
			
			primTextColorNormal = <1.0, 1.0, 1.0>;		// Default of white as hover text
			primTextColorHighlight = <0.0, 1.0, 0.0>;	// Default of green for highlighted text
			primBackgroundColor = <0.0, 0.0, 0.0>;		// Default background color of black
			primBackgroundAlpha = 1.0;
			primTextColorAlpha = 1.0;
			primTextColorHighlightAlpha = 1.0;

			// One parameter beyond the name is for normal color vector
			// Two parameters means normal color then highlight color
			// Third parameter is background and it's transparancy? (we don't do this yet)
			for (i=1; i<cmd; i++)
			{
				p2 = llParseString2List(llList2String(tmpList,i),["=",","],[]);
				if (llGetListLength(p2) >= 4)
				{
					// Build our own list colors - need to scale the color from 0 to 255 to 0.0-1.0
					color.x = llList2Float(p2,1) / 255.0;
					color.y = llList2Float(p2,2) / 255.0;
					color.z = llList2Float(p2,3) / 255.0;
					alpha = 1.0;
					if (llGetListLength(p2) > 4)
						alpha =  llList2Float(p2,4) / 255.0;

					selected = llListFindList(["B","T","H"],[llToUpper(llStringTrim(llList2String(p2,0),STRING_TRIM))]);
					if (selected == 0)
					{
						primBackgroundColor = color;
						primBackgroundAlpha = alpha;
					}
					if (selected == 1)
					{
						primTextColorNormal = color;
						primTextColorAlpha = alpha;
					}
					if (selected == 2)
					{
						primTextColorHighlight = color;
						primTextColorHighlightAlpha = alpha;
					}
				}
			}

			// LSL does NOT do vectors of floats to strings nicely - well... it's really the string back to a
			//  vector that fails (vector ends up <0.0, 0.0, 0.0> which is plain old wrong).
			//  There are better ways that this - but brute force will work (sigh)
			{
				string a;
				string b;
				string c;
				
				a = llDumpList2String([primTextColorNormal.x,primTextColorNormal.y,primTextColorNormal.z],",");
				b = llDumpList2String([primTextColorHighlight.x,primTextColorHighlight.y,primTextColorHighlight.z],",");
				c = llDumpList2String([primBackgroundColor.x,primBackgroundColor.y,primBackgroundColor.z],",");
				MessageUISetTheme(primTexture,a,b,c,primTextColorAlpha,primTextColorHighlightAlpha,primBackgroundAlpha);
			}
		}
		return;
	}
}


default
{

	// This script is controlled completely by linked messages - everything comes in and goes out with a linked message
	link_message(integer sender_num, integer num, string str, key id)
	{
		// Optimize for dropping messages very quickly - so not a lot of lag during useless message handling
		//  think of this as an optimized get out of here quickly check.
		if (-1 == llListFindList([Define_LISTCHANGEHEIGHTLINKID, Define_LISTCHANGEWIDTHLINKID, Define_INVENTORYTHEMELINKID, 0], [num]))
		{
			return; // Not our message - poof - go away quickly
		}

		tmpList = llParseString2List(str, ["|"], []);

		if (Define_LISTCHANGEHEIGHTLINKID == num)
		{
			HandleHUDVerticalSize();
			return;
		}
		
		if (Define_LISTCHANGEWIDTHLINKID == num)
		{
			HandleHUDHorozontalSize();
			return;
		}
		
		if (Define_INVENTORYTHEMELINKID == num)
		{
			HandleThemeSetting();
			return;
		}

		if ((0 == num) && (str == "RESET"))
			llResetScript();
	}
}
